#version 430 compatibility
#extension GL_ARB_compute_shader: 					enable
#extension GL_ARB_shader_storage_buffer_object: 	enable
#extension GL_ARB_compute_variable_group_size : 	enable
struct Light {
    vec4 position_rad;
};
layout(local_size_x = 1, local_size_y = 1) in;
layout (std430, binding = 0) writeonly buffer outputInfo {
    int regionalLightCount[&g_square];
    int lightDirectories[&g_square][&region_lights];
};
layout(rgba32f, binding = 1) uniform sampler2D depth;
layout(rgba32f, binding = 2) uniform image2D debug;
uniform Light lights[&max_lights];
uniform int light_count;
uniform mat4 view;
uniform mat4 proj;
uniform mat4 inv_proj;
float ConvertProjDepthToView(float z) {
    float newZ = 2.0f * z - 1;
    newZ = 1.0f / (newZ*inv_proj[2][3] + inv_proj[3][3]);
    return newZ;
}
void main() {
    int linearID = int (((gl_GlobalInvocationID.x) * &ygrid) + gl_GlobalInvocationID.y);
    float depthMinFloat = 100000;
    float depthMaxFloat = 0;
    vec2 texCoord = vec2(
    (gl_LocalInvocationID.x) * &x1ingrid,
    (gl_LocalInvocationID.y) * &y1ingrid);
    float depthFloat = texture(depth, texCoord).r;
    float viewPosZ = ConvertProjDepthToView( depthFloat );
    uint depthuInt = floatBitsToUint(viewPosZ);
    uint minDepthInt = 0xFFFFFFFF;
    uint maxDepthInt = 0;
    minDepthInt = min(minDepthInt, depthuInt);
    maxDepthInt = max(maxDepthInt, depthuInt);
    depthMinFloat = uintBitsToFloat(minDepthInt); // near to the camera
    depthMaxFloat = uintBitsToFloat(maxDepthInt); // fat to the camera
    vec2 center = vec2(&xhalf, &yhalf);
    vec2 offset = center - vec2(gl_GlobalInvocationID.xy);
    vec4 column0 = vec4(-proj[0][0] * center.x, proj[0][1], offset.x, proj[0][3]);
    vec4 column1 = vec4(proj[1][0], -proj[1][1] * center.y, offset.y, proj[1][3]);
    vec4 column3 = vec4(proj[3][0], proj[3][1], -1.0, proj[3][3]);
    vec4 frustumPlanes[4];
    frustumPlanes[0] = column3 - column0;
    frustumPlanes[1] = column3 + column0;
    frustumPlanes[2] = column3 - column1;
    frustumPlanes[3] = column3 + column1;
    for (int i = 0; i < 4; ++i) {
        frustumPlanes[i] *= 1 / length(frustumPlanes[i].xyz);
    }
    bool found = false;
    int lightOffset = 0;
    for(int i = 0; i < light_count; i++) {
        if (lightOffset < &region_lights) {
            Light light = lights[i];
            vec4 lightPos = vec4(light.position_rad.xyz, 1.0);
            float rad = light.position_rad.w;
            vec4 posViewSpace = view * lightPos;
            bool inFrustum = true;
           if(posViewSpace.z - rad < depthMinFloat) {
                for (int j = 0; j < 4; ++j) {
                    float distance = dot(frustumPlanes[j], posViewSpace);
                    if (-rad > distance) {
                        inFrustum = false;
                        break;
                    }
                }
                if (inFrustum) {
                    found = true;
                    lightDirectories[linearID][lightOffset] = i;
                    lightOffset = lightOffset + 1;
                }
            }
        } else {
            break;
        }
    }
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    barrier();
    if (found) {
        regionalLightCount[linearID] = lightOffset;
        &debugt
    } else {
        &debugf
    }
}